{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/functional-javascript-es6","result":{"data":{"markdownRemark":{"html":"<p>With functional programming's increasing popularity many developers are giving it a shot. While you\nmight often mutate state (e.g. using an ES1 Array method like <code class=\"language-text\">.push</code> or <code class=\"language-text\">.pop</code>) or loop through data there are advantages to\nbreaking this norm. Frontend frameworks like React and Angular are incorporating more functional ideas into their developer\nexperiences. </p>\n<h2>What is Functional Programming?</h2>\n<p>An often used and concise description of functional programming is \"a paradigm involving functions as first-class citizens,\nor in short first-class functions\". To break this down a bit further for the uninitiated,\na function is first-class when it is able to be used as if it was a variable. This includes being returned, passed as an argument or reassigned.</p>\n<p><strong>For example:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// where `a` and `b` are numbers</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">calc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">operation<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">operation</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Pass `add`, `1`, and `2` as arguments to the `calc` function</span>\n<span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// = 3</span></code></pre></div>\n<p>In this case <code class=\"language-text\">add</code> is declared as a traditional function and assigned to a variable, and it can be invoked directly with <code class=\"language-text\">add(a,b)</code>.\n<code class=\"language-text\">add</code> can also be passed as a variable (as in <code class=\"language-text\">calc()</code>). While this scenario is just overcomplicated arithmetic there are actual advantages\nto the functional paradigm. Note we avoid defining variables with 'var' or 'let' and instead opt for 'const' which is cannot be reassigned, I'll talk more about this shortly.</p>\n<h2>Advantages of Functional Programming</h2>\n<p>Functional programming is nothing new. Being modeled after lambda calculus and mathematical functions, functional programming languages\nlike LISP and Haskell have been around for over 60 and 30 years respectively. While you may not see these names crop up often they still\nhave they <a href=\"https://engineering.fb.com/security/fighting-spam-with-haskell/\">still have their uses</a> and for good reason. Functional programming\nposes advantages that, in practice, are unique to the paradigm.</p>\n<h3>No Side Effects &#x26; Debugging</h3>\n<p>Functional programming opts for programming without side effects. Much like a mathematical function, functions take input(s) and return one or more outputs.\nWhen writing code with functions with no side effects, also known as pure functions, a program will often become much easier to debug. Data and state are\nreceived and returned throughout a series of breakpoints (i.e. pure functions) which allows a programmer to pinpoint errors with ease.</p>\n<h3>Code Readability</h3>\n<p>One caveat of writing pure functions and reducing state changes is allocating memory. Luckily JavaScript garbage collection is far from expensive, making it\na great playground for exploring the benefits of functional programming. One of these benefits is readability. Functional programming allows for abstract\nconcepts to be condensed and obscured for clean, very readable code. A great example of this are JavaScript ES5's Array methods like <code class=\"language-text\">map()</code> and <code class=\"language-text\">filter()</code>.</p>\n<p>Since React 16.8, the framework has supported, and has made it clear they intend to move to, using functions from components\nand functional hooks for state management. Both of these implementations replacing their class or object-based predecessors.\nThe React team made this change to provide a simpler and more readable development experience for frontend engineers. Further,\nunderstanding functional programming can prove useful when writing clean code in React.</p>\n<h2>Why JavaScript and ES6?</h2>\n<p>While all these ideas may sound great something that may have come across your mind is 'why JavaScript'? The language is extremely popular\ndue to its dominance on the web, not because it is very readable or logical. These conditions allow for many inexperienced and experienced\nprogrammers alike to write JavaScript in completely different ways. By moving towards a functional paradigm streamlining repositories becomes\na lot easier. Clearly, this would be true of any style guide or paradigm, but there are other, more compelling reason, to write functionally\nin ES6.</p>\n<h3>JavaScript Supports a Variable Number of Arguments</h3>\n<p>JavaScript is somewhat unique in the way it handles arguments in functions. It essentially allows for a variable amount of predefined, or undefined, arguments\nto be passed to a function and will not throw an error unless the compiler flags a variable a required (e.g. it is returned or directly manipulated). This allows functions\nto be written with either truthy values or JavaScript's implicit iterable <code class=\"language-text\">arguments</code> array as seen in the following example.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/*\n *  returns the sum for any length of numerical arguments\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> arg <span class=\"token keyword\">of</span> arguments<span class=\"token punctuation\">)</span> sum <span class=\"token operator\">+=</span> arg<span class=\"token punctuation\">;</span> \n  <span class=\"token comment\">// iterate through JavaScript's implicitly created `arguments` array</span>\n  <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// = 0</span>\n<span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// = 10</span></code></pre></div>\n<h3>Writing Recursively</h3>\n<p>Most newcomers to the functional paradigm question the efficiency of recursion and that uncertainty is well-founded. In most popular (read: object-oriented)\nprogramming languages like Python, C/C++, or Java, recursion can definitely bloat the call stack. This, however, is resolved with <a href=\"https://en.wikipedia.org/wiki/Tail_call\">tail call optimization</a>,\nwhich enables recursive functions calls without adding a new stack frame to the call stack which will help avoid a <code class=\"language-text\">RangeError</code>.\nAlso called tail call elimination, this technique has been added to the JavaScript specifications with EMCAScript 2015 (ES6) and is available in Node.JS.\nThis type of optimization is present in strictly functional languages like Haskell. Unfortunately most browser engines <a href=\"https://kangax.github.io/compat-table/es6/\">(with the odd exception of Safari)</a>\nhave not implemented this part of ES6. While this is concerning for functional JavaScript right now,\nit is also a clear sign of the direction the language is taking in shifting its focus paradigm.</p>\n<h2>Why Not to Use Functional Programming</h2>\n<p>As any computer scientist should know, throwing new, exciting, or complex technology at one's issues is not the most productive way to go about solving a problem.\nWhile functional programming can be a valuable item in a developer's toolbox, the most valuable tool, as corny as it sounds, is judgement.\nKnowing more paradigms can also allow one to both find styles they like to write in themselves and jump into another developer's codebase with ease.</p>","frontmatter":{"date":"May 27, 2020","path":"/blog/functional-javascript-es6","title":"Why and How to Write Functional JavaScript with ES6","tags":["JavaScript"],"abstract":"ES6 allows for integration of functional programming in existing JavaScript programs.","photo":""}},"allMarkdownRemark":{"edges":[{"node":{"id":"b3fdb7b4-8175-5560-8e50-cf95ed9a035f","excerpt":"With functional programming's increasing popularity many developers are giving it a shot. While you\nmight often mutate state (e.g. using an ES1 Array method like  or ) or loop through data there are advantages to \nbreaking this norm. Frontend…","frontmatter":{"date":"May 27, 2020","path":"/blog/functional-javascript-es6","title":"Why and How to Write Functional JavaScript with ES6","abstract":"ES6 allows for integration of functional programming in existing JavaScript programs.","tags":["JavaScript"]}}},{"node":{"id":"5cec0485-ceca-5682-821a-c71cf0fc2155","excerpt":"Scoping & Design Users and Research Founders aims to promote startup creation, funding and growth within the University of Illinois \nUrbana-Champaign. At the request of many of its supported startups Founder's is making a job board for UIUC students…","frontmatter":{"date":"January 20, 2020","path":"/blog/startup-job-board","title":"Creating a Job Board for Startups at UIUC","abstract":"The process of creating a student job board focused on startups at the University of Illinois at Urbana-Champaign.","tags":["React","Web Applications"]}}}]}},"pageContext":{}}}