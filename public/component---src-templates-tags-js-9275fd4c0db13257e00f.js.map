{"version":3,"sources":["webpack:///./src/components/ArticleCard.js","webpack:///./src/templates/tags.js"],"names":["ArticleCard","post","className","date","to","path","title","abstract","tags","map","tag","toLowerCase","Tags","pageContext","data","allMarkdownRemark","edges","totalCount","tagHeader","node","slug","fields","frontmatter","key","pageQuery"],"mappings":"8FAAA,+CA0BeA,IArBK,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAF,OAChB,6BAASC,UAAU,gBACf,yBAAKA,UAAU,QACX,4BAAI,uBAAGA,UAAU,oBAAqBD,EAAKE,MAC3C,4BAAI,kBAAC,OAAD,CAAMC,GAAIH,EAAKI,MAAOJ,EAAKK,QAC/B,2BACKL,EAAKM,UAEV,4BAESN,EAAKO,KAAMC,KAAI,SAAAC,GAAG,OACf,4BAAI,kBAAC,OAAD,CAAMN,GAAE,cAAgBM,EAAIC,eAAkBD,Y,kCChB1E,0HAiEeE,UAxDF,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KACjBJ,EAAQG,EAARH,IAD4B,EAENI,EAAKC,kBAA3BC,EAF4B,EAE5BA,MAAOC,EAFqB,EAErBA,WACTC,EAAeD,EAAN,SACI,IAAfA,EAAmB,GAAK,KADb,iBAEEP,EAFF,IAIf,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKJ,MAAM,SACX,wBAAIJ,UAAU,eAAegB,GACxBF,EAAMP,KAAI,YAAe,IAAZU,EAAW,EAAXA,KACFC,EAASD,EAAKE,OAAdD,KACFnB,EAAOkB,EAAKG,YAClB,OACI,oCACA,kBAAC,IAAD,CACIC,IAAKH,EACLnB,KAAMA,IAEV,iCAQZ,kBAAC,OAAD,CAAMG,GAAG,aAAaF,UAAU,aAAhC,cA8BL,IAAMsB,EAAS","file":"component---src-templates-tags-js-9275fd4c0db13257e00f.js","sourcesContent":["import { Link } from \"gatsby\"\nimport React from \"react\"\n\nimport \"./articlecard.css\"\n\nconst ArticleCard = ({post}) => (\n    <section className=\"article-card\" >\n        <div className=\"info\">\n            <h3><i className=\"fas fa-calendar\" />{post.date}</h3>\n            <h2><Link to={post.path}>{post.title}</Link></h2>\n            <p>\n                {post.abstract}\n            </p>\n            <ul>\n                {\n                    (post.tags).map(tag => (\n                        <li><Link to={`/blog/tags/${tag.toLowerCase()}`}>{tag}</Link></li>\n                        )\n                    )\n                }\n            </ul>\n            {/*<Link to={post.path} className=\"read-more\"><span>Read More</span></Link>*/}\n        </div>\n    </section>\n);\n\nexport default ArticleCard;","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\n// Components\nimport { Link, graphql } from \"gatsby\"\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nimport ArticleCard from \"../components/ArticleCard\";\n\nconst Tags = ({ pageContext, data }) => {\n    const { tag } = pageContext\n    const { edges, totalCount } = data.allMarkdownRemark\n    const tagHeader = `${totalCount} post${\n        totalCount === 1 ? \"\" : \"s\"\n    } tagged with \"${tag}\"`\n\n    return (\n        <Layout>\n            <SEO title=\"Tags\" />\n            <h2 className=\"work-header\">{tagHeader}</h2>\n                {edges.map(({ node }) => {\n                    const { slug } = node.fields\n                    const post = node.frontmatter\n                    return (\n                        <>\n                        <ArticleCard\n                            key={slug}\n                            post={post}\n                        />\n                        <hr />\n                        </>\n                    )\n                })}\n            {/*\n              This links to a page that does not yet exist.\n              You'll come back to it!\n            */}\n            <Link to=\"/blog/tags\" className=\"view-more\">All tags</Link>\n        </Layout>\n    )\n}\n\nTags.propTypes = {\n    pageContext: PropTypes.shape({\n        tag: PropTypes.string.isRequired,\n    }),\n    data: PropTypes.shape({\n        allMarkdownRemark: PropTypes.shape({\n            totalCount: PropTypes.number.isRequired,\n            edges: PropTypes.arrayOf(\n                PropTypes.shape({\n                    node: PropTypes.shape({\n                        frontmatter: PropTypes.shape({\n                            title: PropTypes.string.isRequired,\n                        }),\n                        fields: PropTypes.shape({\n                            slug: PropTypes.string.isRequired,\n                        }),\n                    }),\n                }).isRequired\n            ),\n        }),\n    }),\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            path\n            title\n            abstract\n            tags\n          }\n        }\n      }\n    }\n  }\n`"],"sourceRoot":""}