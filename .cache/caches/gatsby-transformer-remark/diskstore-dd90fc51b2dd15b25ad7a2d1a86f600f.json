{"expireTime":9007200842262052000,"key":"transformer-remark-markdown-html-ast-a0b48eb79b2392be96bfab41fd990a81-gatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"raw","value":"<!--\nIntroduction\n-->","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":4,"column":4,"offset":22}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"What is Functional Programming?","position":{"start":{"line":6,"column":4,"offset":27},"end":{"line":6,"column":35,"offset":58}}}],"position":{"start":{"line":6,"column":1,"offset":24},"end":{"line":6,"column":35,"offset":58}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"An often used and concise description of functional programming is \"a paradigm involving functions as first-class citizens,\nor in short first-class functions\". To break this down a bit further for the uninitiated,\na function is first-class when it is able to be used as if it was a variable. This includes being returned, passed as an argument or reassigned.","position":{"start":{"line":8,"column":1,"offset":60},"end":{"line":10,"column":145,"offset":419}}}],"position":{"start":{"line":8,"column":1,"offset":60},"end":{"line":10,"column":145,"offset":419}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br />","position":{"start":{"line":12,"column":1,"offset":421},"end":{"line":12,"column":7,"offset":427}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"For example:","position":{"start":{"line":14,"column":3,"offset":431},"end":{"line":14,"column":15,"offset":443}}}],"position":{"start":{"line":14,"column":1,"offset":429},"end":{"line":14,"column":17,"offset":445}}}],"position":{"start":{"line":14,"column":1,"offset":429},"end":{"line":14,"column":17,"offset":445}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// where `a` and `b` are numbers</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">calc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">operation<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">operation</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Pass `add`, `1`, and `2` as arguments to the `calc` function</span>\n<span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// value = 3</span></code></pre></div>","position":{"start":{"line":16,"column":1,"offset":447},"end":{"line":28,"column":4,"offset":719}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In this case ","position":{"start":{"line":30,"column":1,"offset":721},"end":{"line":30,"column":14,"offset":734}}},{"type":"raw","value":"<code class=\"language-text\">add</code>","position":{"start":{"line":30,"column":14,"offset":734},"end":{"line":30,"column":19,"offset":739}}},{"type":"text","value":" is declared as a traditional function and assigned to a variable and it can be invoked directly with ","position":{"start":{"line":30,"column":19,"offset":739},"end":{"line":30,"column":121,"offset":841}}},{"type":"raw","value":"<code class=\"language-text\">add(a,b)</code>","position":{"start":{"line":30,"column":121,"offset":841},"end":{"line":30,"column":131,"offset":851}}},{"type":"text","value":".\n","position":{"start":{"line":30,"column":131,"offset":851},"end":{"line":31,"column":1,"offset":854}}},{"type":"raw","value":"<code class=\"language-text\">add</code>","position":{"start":{"line":31,"column":1,"offset":854},"end":{"line":31,"column":6,"offset":859}}},{"type":"text","value":" can also be passed as a variable (as in ","position":{"start":{"line":31,"column":6,"offset":859},"end":{"line":31,"column":47,"offset":900}}},{"type":"raw","value":"<code class=\"language-text\">calc()</code>","position":{"start":{"line":31,"column":47,"offset":900},"end":{"line":31,"column":55,"offset":908}}},{"type":"text","value":"). While this scenario is just overcomplicated arithmetic there are actual advantages\nto the functional paradigm. Note we avoid defining variables with 'var' or 'let' and instead opt for 'const' which is cannot be reassigned, I'll talk more about this shortly.","position":{"start":{"line":31,"column":55,"offset":908},"end":{"line":32,"column":175,"offset":1168}}}],"position":{"start":{"line":30,"column":1,"offset":721},"end":{"line":32,"column":175,"offset":1168}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Advantages of Functional Programming","position":{"start":{"line":34,"column":4,"offset":1174},"end":{"line":34,"column":40,"offset":1210}}}],"position":{"start":{"line":34,"column":1,"offset":1171},"end":{"line":34,"column":40,"offset":1210}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Functional programming is nothing new. Being modeled after lambda calculus and mathematical functions, functional programming languages\nlike LISP and Haskell have been around for over 60 and 30 years respectively","position":{"start":{"line":36,"column":1,"offset":1212},"end":{"line":37,"column":77,"offset":1425}}}],"position":{"start":{"line":36,"column":1,"offset":1212},"end":{"line":37,"column":77,"offset":1425}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"No Side Effects","position":{"start":{"line":39,"column":5,"offset":1431},"end":{"line":39,"column":20,"offset":1446}}}],"position":{"start":{"line":39,"column":1,"offset":1427},"end":{"line":39,"column":20,"offset":1446}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Functional programming opts for programming without side effects. Much like a mathematical function functional programming takes input(s) and returns one or more outputs.","position":{"start":{"line":41,"column":1,"offset":1448},"end":{"line":41,"column":171,"offset":1618}}}],"position":{"start":{"line":41,"column":1,"offset":1448},"end":{"line":41,"column":171,"offset":1618}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Code Readability","position":{"start":{"line":43,"column":5,"offset":1624},"end":{"line":43,"column":21,"offset":1640}}}],"position":{"start":{"line":43,"column":1,"offset":1620},"end":{"line":43,"column":21,"offset":1640}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Why use JavaScript?","position":{"start":{"line":45,"column":4,"offset":1645},"end":{"line":45,"column":23,"offset":1664}}}],"position":{"start":{"line":45,"column":1,"offset":1642},"end":{"line":45,"column":23,"offset":1664}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Using ES6 for","position":{"start":{"line":47,"column":4,"offset":1669},"end":{"line":47,"column":17,"offset":1682}}}],"position":{"start":{"line":47,"column":1,"offset":1666},"end":{"line":47,"column":18,"offset":1683}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Why Not to Use Functional Programming","position":{"start":{"line":49,"column":4,"offset":1688},"end":{"line":49,"column":41,"offset":1725}}}],"position":{"start":{"line":49,"column":1,"offset":1685},"end":{"line":49,"column":41,"offset":1725}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Lastly, while functional programming can be a valuable item in a developer's toolbox, the most valuable tool, as corny as it sounds, is judgement.\nThrowing new, exciting, or complicated technology at one's issues is not the most productive way to go about solving a problem. It is the same reason\nthere are multiple paradigms in use and more than one language implementation for each paradigm.","position":{"start":{"line":51,"column":1,"offset":1727},"end":{"line":53,"column":97,"offset":2120}}}],"position":{"start":{"line":51,"column":1,"offset":1727},"end":{"line":53,"column":97,"offset":2120}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":53,"column":97,"offset":2120}}}}